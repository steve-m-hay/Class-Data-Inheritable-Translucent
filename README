NAME
    Class::Data::Inheritable::Translucent - Inheritable, overridable,
    translucent class data / object attributes

SYNOPSIS
      package Foo;
      use parent qw(Class::Data::Inheritable::Translucent);
      sub new { bless {}, shift }

      # Read/write attributes
      Foo->mk_class_accessor(cattr => "bar");
      Foo->mk_translucent_accessor(tattr => "bar");
      Foo->mk_object_accessor(oattr => "bar");

      # Read-only attributes
      Foo->mk_ro_class_accessor(foo => 1);
      Foo->mk_ro_translucent_accessor(bar => 1);
      Foo->mk_ro_object_accessor(baz => 1);

      my $obj = Foo->new;
      print $obj->cattr; # prints "bar"
      print $obj->tattr; # prints "bar"
      print $obj->oattr; # prints "bar"
      print Foo->cattr;  # prints "bar"
      print Foo->tattr;  # prints "bar"

      $obj->cattr("baz");
      $obj->tattr("baz");
      $obj->oattr("baz");
      print $obj->cattr; # prints "baz"
      print $obj->tattr; # prints "baz"
      print $obj->oattr; # prints "baz"
      print Foo->cattr;  # prints "baz"
      print Foo->tattr;  # prints "bar"

      Foo->cattr("qux");
      Foo->tattr("qux");
      print $obj->cattr; # prints "qux"
      print $obj->tattr; # prints "baz"
      print Foo->cattr;  # prints "qux"
      print Foo->tattr;  # prints "qux"

      delete $obj->{tattr};
      delete $obj->{oattr};
      print $obj->tattr; # prints "qux"
      print $obj->oattr; # prints "bar"
      print Foo->tattr;  # prints "qux"

DESCRIPTION
    This module is based on Class::Data::Inheritable, and is largely the
    same except the class data accessors optionally double as translucent
    object attribute accessors.

    The value of object attribute $attribute, by default, is stored in
    $object->{$attribute}. See the attrs() method, explained below, on how
    to change that.

  Methods
    mk_class_accessor
        Creates an accessor for inheritable, overridable class data. Does
        not install the accessor method if a subroutine of the same name
        already exists; likewise for the alias method
        (_<attribute>_accessor()).

    mk_translucent_accessor
        Creates an accessor for inheritable, overridable class data which
        doubles as a translucent object attribute accessor. Does not install
        the accessor method if a subroutine of the same name already exists;
        likewise for the alias method (_<attribute>_accessor()).

    mk_translucent
        Alias for mk_translucent_accessor(), for backwards compatibility.

    mk_object_accessor
        Creates a non-translucent object attribute accessor. Does not
        install the accessor method if a subroutine of the same name already
        exists; likewise for the alias method (_<attribute>_accessor()).

    mk_ro_class_accessor
        Same as "mk_class_accessor" except that the data is read-only.

    mk_ro_translucent_accessor
        Same as "mk_translucent_accessor" except that the data/attribute is
        read-only. Objects can be initialized with a non-default value for
        the attribute, but the value cannot subsequently be changed via the
        accessor method.

    mk_ro_object_accessor
        Same as "mk_object_accessor" except that the attribute is read-only.
        Objects can be initialized with a non-default value for the
        attribute, but the value cannot subsequently be changed via the
        accessor method.

    attrs
        This method is called by the generated accessors and, by default,
        simply returns the object that called it, which should be a hash
        reference for storing object attributes. If your objects are not
        hashrefs, or you wish to store your object attributes in a different
        location, e.g. $object->{attrs}, then you should override this
        method. Class::Data::Inheritable::Translucent stores the value of
        object attribute $attribute in $object->attrs()->{$attribute}.

DIAGNOSTICS
  Warnings and Error Messages
    This module may produce the following diagnostic messages. They are
    classified as follows (a la perldiag):

        (W) A warning (optional).
        (F) A fatal error (trappable).
        (I) An internal error that you should never see (trappable).

    %s() is a class method, not an object method
        (F) TODO

    %s is a read-only attribute
        (F) TODO

    %s() is an object method, not a class method
        (F) TODO

COMPATIBILITY
    Before version 2.00 of this module, an object attribute that had been
    set to override translucent class data could be "reset" to reveal the
    inherited class data value by setting it to the undefined value.

    As of version 2.00 of this module, the attribute must now be deleted
    from the object in order to have the same effect. If your objects are
    hashrefs then this is done simply with "delete $object->{$attribute}";
    more generally, and in particular if you have overridden attrs(), this
    is done with "delete $object->attrs()->{$attribute}".

    THIS IS AN INCOMPATIBLE CHANGE. EXISTING SOFTWARE THAT USES THIS FEATURE
    WILL NEED TO BE MODIFIED.

FEEDBACK
    Patches, bug reports, suggestions or any other feedback is welcome.

    Bugs can be reported on the CPAN Request Tracker at
    https://rt.cpan.org/Public/Bug/Report.html?Queue=Class-Data-Inheritable-
    Translucent.

    Open bugs on the CPAN Request Tracker can be viewed at
    https://rt.cpan.org/Public/Dist/Display.html?Status=Active;Dist=Class-Da
    ta-Inheritable-Translucent.

    Please test this distribution. See CPAN Testers Reports at
    http://www.cpantesters.org/ for details of how to get involved.

    Previous test results on CPAN Testers Reports can be viewed at
    http://www.cpantesters.org/distro/C/Class-Data-Inheritable-Translucent.h
    tml.

    Please rate this distribution on CPAN Ratings at
    http://cpanratings.perl.org/rate/?distribution=Class-Data-Inheritable-Tr
    anslucent.

SEE ALSO
    *   Class::Data::Inheritable - An almost exact duplicate of the
        mk_class_accessor() part of this module, which this module was based
        on.

        However, as of version 0.08, it doesn't make use of Sub::Name (so
        all accessor methods created by it will show up as "__ANON__" in,
        e.g. profiling tools), it doesn't support non hash-based objects,
        and it will blindly overwrite any existing (accessor) methods.

    *   Class::Data::Accessor - An almost exact duplicate of the
        mk_translucent_accessor() part of this module, created only a
        fortnight before it!

        However, as of version 0.04004, it also doesn't make use of
        Sub::Name or support non hash-based objects and does overwrite any
        existing methods. It has also been deprecated in favour of
        Class::Accessor::Grouped (or Moose).

    *   Class::Accessor::Grouped - The "inherited" accessor type also does
        the same thing as the mk_translucent_accessor() part of this module.

        However, as of version 0.10012, whilst it does make use of
        Sub::Name, it doesn't support non hash-based objects and does
        overwrite any existing methods.

    *   perltooc - Tom's OO Tutorial for Class Data in Perl - a pretty nice
        Class Data tutorial for Perl

    *   The source. It's quite short, and simple enough.

ACKNOWLEDGEMENTS
    The "_mk_accessor()" method is based on the "mk_classdata()" method in
    the Class::Data::Inheritable module, written by Damian Conway.

AVAILABILITY
    The latest version of this module is available from CPAN (see "CPAN" in
    perlmodlib for details) at

    https://metacpan.org/release/Class-Data-Inheritable-Translucent or

    http://search.cpan.org/dist/Class-Data-Inheritable-Translucent/ or

    http://www.cpan.org/authors/id/S/SH/SHAY/ or

    http://www.cpan.org/modules/by-module/Class/.

INSTALLATION
    See the INSTALL file.

AUTHOR
    Ryan McGuigan

    Steve Hay <shay@cpan.org> is now maintaining
    Class::Data::Inheritable::Translucent as of version 1.00

COPYRIGHT
    Version 0.01 Copyright (C) 2005 Ryan McGuigan. All rights reserved.

    Changes in Version 1.00 onwards Copyright (C) 2009, 2011, 2014 Steve
    Hay. All rights reserved.

LICENCE
    This module is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself, i.e. under the terms of either the
    GNU General Public License or the Artistic License, as specified in the
    LICENCE file.

VERSION
    Version 2.00

DATE
    TODO

HISTORY
    See the Changes file.

