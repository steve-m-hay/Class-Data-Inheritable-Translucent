NAME
    Class::Data::Inheritable::Translucent - Inheritable, overridable,
    translucent class data / object attributes

SYNOPSIS
      package Foo;
      use base qw(Class::Data::Inheritable::Translucent);

      Foo->mk_class_accessor("cbar");
      Foo->mk_translucent_accessor("tbar");

      Foo->cbar("baz");
      Foo->tbar("baz");
      $obj = Foo->new;
      print $obj->cbar; # prints "baz"
      print $obj->tbar; # prints "baz"
      print Foo->cbar;  # prints "baz"
      print Foo->tbar;  # prints "baz"

      $obj->cbar("whatever");
      $obj->tbar("whatever");
      print $obj->cbar; # prints "whatever"
      print $obj->tbar; # prints "whatever"
      print Foo->cbar;  # prints "whatever"
      print Foo->tbar;  # prints "baz"

      Foo->cbar("qux");
      Foo->tbar("qux");
      print $obj->cbar; # prints "qux"
      print $obj->tbar; # prints "whatever"
      print Foo->cbar;  # prints "qux"
      print Foo->tbar;  # prints "qux"

      $obj->cbar(undef);
      $obj->tbar(undef);
      print $obj->cbar; # prints nothing
      print $obj->tbar; # prints "qux"
      print Foo->cbar;  # prints nothing
      print Foo->tbar;  # prints "qux"

DESCRIPTION
    This module is based on Class::Data::Inheritable, and is largely the
    same except the class data accessors optionally double as translucent
    object attribute accessors.

    The value of object attribute $attribute, by default, is stored in
    $object->{$attribute}. See the attrs() method, explained below, on how
    to change that.

METHODS
    mk_class_accessor
        Creates an accessor for inheritable, overridable class data. Does
        not install the accessor method if a subroutine of the same name
        already exists; likewise for the alias method
        (_<attribute>_accessor()).

    mk_translucent_accessor
        Creates an accessor for inheritable, overridable class data which
        doubles as a translucent object attribute accessor. Does not install
        the accessor method if a subroutine of the same name already exists;
        likewise for the alias method (_<attribute>_accessor()).

    mk_translucent
        Alias for mk_translucent_accessor(), for backwards compatibility.

    attrs
        This method is called by the generated accessors and, by default,
        simply returns the object that called it, which should be a hash
        reference for storing object attributes. If your objects are not
        hashrefs, or you wish to store your object attributes in a different
        location, e.g. $object->{attrs}, then you should override this
        method. Class::Data::Inheritable::Translucent stores the value of
        object attribute $attribute in $object->attrs()->{$attribute}.

AUTHOR
    Ryan McGuigan

    Based on Class::Data::Inheritable, originally by Damian Conway

    Steve Hay <shay@cpan.org> is now maintaining
    Class::Data::Inheritable::Translucent as of version 1.00

ACKNOWLEDGEMENTS
    Thanks to Damian Conway for Class::Data::Inheritable

COPYRIGHT & LICENSE
    Version 0.01 Copyright 2005 Ryan McGuigan, all rights reserved. Changes
    in Version 1.00 onwards Copyright (C) 2009, 2011, 2014 Steve Hay. All
    rights reserved.

    _mk_accessor is based on mk_classdata from Class::Data::Inheritable,
    Copyright Damian Conway and Michael G Schwern, licensed under the terms
    of the Perl Artistic License.

    This program is free software; It may be used, redistributed and/or
    modified under the terms of the Perl Artistic License (see
    <http://www.perl.com/perl/misc/Artistic.html>)

BUGS
    Please report any bugs or feature requests on the CPAN Request Tracker
    at
    http://rt.cpan.org/Public/Bug/Report.html?Queue=Class-Data-Inheritable-T
    ranslucent.

SEE ALSO
    * Class::Data::Inheritable - An almost exact duplicate of the
      mk_class_accessor() part of this module, which this module was based
      on.

      However, as of version 0.08, it doesn't make use of Sub::Name (so all
      accessor methods created by it will show up as "__ANON__" in, e.g.
      profiling tools), it doesn't support non hash-based objects, and it
      will blindly overwrite any existing (accessor) methods.

    * Class::Data::Accessor - An almost exact duplicate of the
      mk_translucent_accessor() part of this module, created only a
      fortnight before it!

      However, as of version 0.04004, it also doesn't make use of Sub::Name
      or support non hash-based objects, does blindly overwrite any existing
      methods, and it also doesn't support the use of "undef" to wipe out an
      overridden object attribute's value and reinherit the class default.
      It has also been deprecated in favour of Class::Accessor::Grouped (or
      Moose).

    * Class::Accessor::Grouped - The "inherited" accessor type also does the
      same thing as the mk_translucent_accessor() part of this module.

      However, as of version 0.10010, whilst it does make use of Sub::Name,
      it still doesn't support non hash-based objects, does blindly
      overwrite existing methods, and doesn't support "undef" to reset an
      overridden object attribute's value

    * perltooc - Tom's OO Tutorial for Class Data in Perl - a pretty nice
      Class Data tutorial for Perl

    * The source. It's quite short, and simple enough.

